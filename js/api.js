/**
 * Í¥ëÏòÅÏó¨Í≥† ÏïÑÏπ®ÏûêÏäµ Í¥ÄÎ¶¨ ÏãúÏä§ÌÖú - API Ïó∞Îèô Î™®Îìà
 * Î°úÏª¨Ïä§ÌÜ†Î¶¨ÏßÄ + Íµ¨Í∏Ä Ïï±Ïä§ÌÅ¨Î¶ΩÌä∏ Ïó∞Îèô ÏßÄÏõê
 */

class AttendanceAPI {
    constructor() {
        // üÜï JJ ÏÑ†ÏÉùÎãòÏùò Google Apps Script URL ÏûêÎèô ÏÑ§Ï†ï
        this.webAppUrl = localStorage.getItem('WEBAPP_URL') || 'https://script.google.com/macros/s/AKfycbway641X2eskkkpRAw36Yde059Vcto9Oqr6ezRx5969FzO912cZsOKlOrAvbUkfSXWZMA/exec';
        this.isOnlineMode = true; // Ìï≠ÏÉÅ Ïò®ÎùºÏù∏ Î™®ÎìúÎ°ú ÏÑ§Ï†ï
        
        // URLÏù¥ ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÎã§Î©¥ ÏûêÎèôÏúºÎ°ú Ï†ÄÏû•
        if (!localStorage.getItem('WEBAPP_URL')) {
            localStorage.setItem('WEBAPP_URL', this.webAppUrl);
        }
        
        console.log(`ÏïÑÏπ®ÏûêÏäµ API Ï¥àÍ∏∞Ìôî - ${this.isOnlineMode ? 'Ïò®ÎùºÏù∏' : 'Ïò§ÌîÑÎùºÏù∏'} Î™®Îìú`);
        console.log('Google Apps Script URL:', this.webAppUrl);
    }

    /**
     * Íµ¨Í∏Ä Ïï±Ïä§ÌÅ¨Î¶ΩÌä∏ ÏõπÏï± URL ÏÑ§Ï†ï
     */
    setWebAppUrl(url) {
        this.webAppUrl = url;
        this.isOnlineMode = true;
        localStorage.setItem('WEBAPP_URL', url);
        console.log('Íµ¨Í∏Ä Ïï±Ïä§ÌÅ¨Î¶ΩÌä∏ URL ÏÑ§Ï†ïÎê®:', url);
    }

    /**
     * Ï∂úÍ≤∞ Îç∞Ïù¥ÌÑ∞ Ï†úÏ∂ú
     */
    async submitAttendance(data) {
        console.log('Ï∂úÍ≤∞ Îç∞Ïù¥ÌÑ∞ Ï†úÏ∂ú:', data);
        
        if (this.isOnlineMode && this.webAppUrl) {
            return await this._submitToGoogleScript(data);
        } else {
            return this._submitToLocalStorage(data);
        }
    }

    /**
     * Íµ¨Í∏Ä Ïï±Ïä§ÌÅ¨Î¶ΩÌä∏Î°ú Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ° (JJ ÏÑ†ÏÉùÎãòÏùò v8 ÏãúÏä§ÌÖú Ïó∞Îèô)
     */
    async _submitToGoogleScript(data) {
        try {
            // v8 Apps Script doPost Ìï®ÏàòÏóê ÎßûÎäî Îç∞Ïù¥ÌÑ∞ ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò
            const formData = new URLSearchParams();
            formData.append('action', 'submit');
            formData.append('student_id', data.studentId);
            formData.append('student_name', data.studentName);
            formData.append('status', data.status);
            formData.append('timestamp', data.timestamp || new Date().toISOString());
            formData.append('source', 'web_interface');

            const response = await fetch(this.webAppUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: formData,
                mode: 'no-cors' // Google Apps Script CORS ÌöåÌîº
            });

            console.log('üì° Íµ¨Í∏Ä Ïï±Ïä§ÌÅ¨Î¶ΩÌä∏ v8 ÏãúÏä§ÌÖúÏúºÎ°ú Ï†ÑÏÜ° ÏôÑÎ£å');
            console.log('üìä Ï†ÑÏÜ° Îç∞Ïù¥ÌÑ∞:', {
                student_id: data.studentId,
                student_name: data.studentName, 
                status: data.status,
                timestamp: data.timestamp
            });
            
            // Î°úÏª¨Ïä§ÌÜ†Î¶¨ÏßÄÏóêÎèÑ Î∞±ÏóÖ Ï†ÄÏû• (Ïù¥Ï§ë ÏïàÏ†ÑÏû•Ïπò)
            this._submitToLocalStorage(data);
            
            return {
                success: true,
                message: `üì° ${data.studentName}ÎãòÏùò ${data.status} Í∏∞Î°ùÏù¥ Íµ¨Í∏Ä ÏãúÏä§ÌÖúÏúºÎ°ú Ï†ÑÏÜ°ÎêòÏóàÏäµÎãàÎã§!`,
                timestamp: new Date().toISOString(),
                mode: 'google_script_v8'
            };

        } catch (error) {
            console.warn('üîÑ Íµ¨Í∏Ä Ïï±Ïä§ÌÅ¨Î¶ΩÌä∏ Ï†ÑÏÜ° Ïã§Ìå®, Ïò§ÌîÑÎùºÏù∏ Î™®ÎìúÎ°ú Ï†ÑÌôò:', error);
            // Ïã§Ìå®Ïãú Î°úÏª¨Ïä§ÌÜ†Î¶¨ÏßÄÎ°ú ÏïàÏ†ÑÌïòÍ≤å Ìè¥Î∞±
            const result = this._submitToLocalStorage(data);
            result.message = `‚ö†Ô∏è Ïò®ÎùºÏù∏ Ïó∞Í≤∞ Ïã§Ìå®Î°ú Î°úÏª¨Ïóê Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§. ÎÇòÏ§ëÏóê ÏûêÎèô ÎèôÍ∏∞ÌôîÎê©ÎãàÎã§.`;
            return result;
        }
    }

    /**
     * Î°úÏª¨Ïä§ÌÜ†Î¶¨ÏßÄÏóê Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•
     */
    _submitToLocalStorage(data) {
        try {
            const attendanceData = JSON.parse(localStorage.getItem('attendanceData') || '[]');
            
            // Îç∞Ïù¥ÌÑ∞Ïóê Í≥†Ïú† ID Ï∂îÍ∞Ä
            const recordData = {
                ...data,
                id: this._generateId(),
                submittedAt: new Date().toISOString(),
                source: this.isOnlineMode ? 'online_backup' : 'offline'
            };
            
            attendanceData.push(recordData);
            localStorage.setItem('attendanceData', JSON.stringify(attendanceData));
            
            console.log('Î°úÏª¨Ïä§ÌÜ†Î¶¨ÏßÄ Ï†ÄÏû• ÏôÑÎ£å:', recordData);
            
            return {
                success: true,
                message: 'Ï∂úÍ≤∞Ïù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Í∏∞Î°ùÎêòÏóàÏäµÎãàÎã§!',
                data: recordData
            };

        } catch (error) {
            console.error('Î°úÏª¨Ïä§ÌÜ†Î¶¨ÏßÄ Ï†ÄÏû• Ïã§Ìå®:', error);
            return {
                success: false,
                message: 'Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.'
            };
        }
    }

    /**
     * Ï∂úÍ≤∞ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå (ÌïòÏù¥Î∏åÎ¶¨Îìú Î™®Îìú: Google Sheets + Î°úÏª¨ Îç∞Ïù¥ÌÑ∞)
     */
    async getAttendanceData(filters = {}) {
        try {
            // üÜï ÌïòÏù¥Î∏åÎ¶¨Îìú Î™®Îìú: Google Sheets Îç∞Ïù¥ÌÑ∞ÏôÄ Î°úÏª¨ Îç∞Ïù¥ÌÑ∞ Î≥ëÌï©
            const localResult = this._getFromLocalStorage(filters);
            const localData = localResult.success ? localResult.data : [];
            
            let googleData = [];
            
            try {
                // Google Sheets Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ ÏãúÎèÑ
                const googleResult = await this._getFromGoogleScript(filters);
                if (googleResult.success) {
                    googleData = googleResult.data;
                    console.log('üìä Google Sheets Îç∞Ïù¥ÌÑ∞:', googleData.length + 'Í±¥');
                }
            } catch (googleError) {
                console.warn('Google Sheets Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®, Î°úÏª¨ Îç∞Ïù¥ÌÑ∞Îßå ÏÇ¨Ïö©:', googleError);
            }
            
            // Ï§ëÎ≥µ Ï†úÍ±∞Î•º ÏúÑÌïú Í≥†Ïú†ÌÇ§ ÏÉùÏÑ± Ìï®Ïàò
            const generateUniqueKey = (record) => {
                const date = new Date(record.timestamp).toISOString().split('T')[0];
                const time = new Date(record.timestamp).toTimeString().split(' ')[0].substring(0, 5);
                return `${date}_${record.studentId}_${record.status}_${time}`;
            };
            
            // Îç∞Ïù¥ÌÑ∞ Î≥ëÌï© Î∞è Ï§ëÎ≥µ Ï†úÍ±∞
            const mergedData = [];
            const seenKeys = new Set();
            
            // Google Sheets Îç∞Ïù¥ÌÑ∞ Ïö∞ÏÑ† Ï∂îÍ∞Ä
            googleData.forEach(record => {
                const key = generateUniqueKey(record);
                if (!seenKeys.has(key)) {
                    mergedData.push(record);
                    seenKeys.add(key);
                }
            });
            
            // Î°úÏª¨ Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä (Ï§ëÎ≥µ Ï†úÏô∏)
            localData.forEach(record => {
                const key = generateUniqueKey(record);
                if (!seenKeys.has(key)) {
                    mergedData.push(record);
                    seenKeys.add(key);
                }
            });
            
            // ÏãúÍ∞ÑÏàú Ï†ïÎ†¨
            mergedData.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
            
            console.log(`üìä ÌïòÏù¥Î∏åÎ¶¨Îìú Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå ÏôÑÎ£å: Google ${googleData.length}Í±¥ + Local ${localData.length}Í±¥ = Ï¥ù ${mergedData.length}Í±¥`);
            
            return {
                success: true,
                data: mergedData,
                source: 'hybrid',
                googleCount: googleData.length,
                localCount: localData.length,
                total: mergedData.length
            };
            
        } catch (error) {
            console.error('Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïã§Ìå®:', error);
            // ÏµúÌõÑÏùò ÏàòÎã®: Î°úÏª¨ Îç∞Ïù¥ÌÑ∞Îßå Î∞òÌôò
            const fallbackResult = this._getFromLocalStorage(filters);
            fallbackResult.source = 'fallback_local';
            return fallbackResult;
        }
    }

    /**
     * Íµ¨Í∏Ä Ïï±Ïä§ÌÅ¨Î¶ΩÌä∏ÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå (v8 ÏãúÏä§ÌÖú doGet Ïó∞Îèô)
     */
    async _getFromGoogleScript(filters) {
        try {
            // üÜï ÏÉàÎ°úÏö¥ Google Apps Script ÏóîÎìúÌè¨Ïù∏Ìä∏ ÏÇ¨Ïö© (CORS Î¨∏Ï†ú Ìï¥Í≤∞)
            const params = new URLSearchParams({
                action: 'getAllAttendance'
            });
            
            console.log('üì° Google Apps Script ÏöîÏ≤≠ ÏãúÎèÑ...');
            
            const response = await fetch(`${this.webAppUrl}?${params}`);

            console.log('üì° ÏùëÎãµ ÏÉÅÌÉú:', response.status, response.statusText);
            
            if (response.ok) {
                const googleResult = await response.json();
                console.log('üìä Google Apps Script ÏùëÎãµ:', googleResult);
                
                if (!googleResult.success) {
                    throw new Error(googleResult.error || 'Google Sheets Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïã§Ìå®');
                }
                
                // Google Sheets Îç∞Ïù¥ÌÑ∞Î•º ÏõπÏãúÏä§ÌÖú ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò
                const convertedData = [];
                
                googleResult.data.forEach(googleRecord => {
                    // ÏûÖÏã§ Í∏∞Î°ù ÏÉùÏÑ±
                    if (googleRecord.checkInTime) {
                        const baseDate = typeof googleRecord.date === 'string' ? 
                            googleRecord.date : 
                            new Date(googleRecord.date).toISOString().split('T')[0];
                        
                        const checkInDateTime = new Date(`${baseDate}T${googleRecord.checkInTime}`);
                        
                        if (!isNaN(checkInDateTime.getTime())) {
                            convertedData.push({
                                id: `${googleRecord.id}-checkin`,
                                studentId: googleRecord.studentId,
                                studentName: googleRecord.studentName,
                                status: 'ÏûÖÏã§',
                                timestamp: checkInDateTime.toISOString(),
                                source: 'google_sheets'
                            });
                        }
                    }
                    
                    // Ìá¥Ïã§ Í∏∞Î°ù ÏÉùÏÑ±
                    if (googleRecord.checkOutTime) {
                        const baseDate = typeof googleRecord.date === 'string' ? 
                            googleRecord.date : 
                            new Date(googleRecord.date).toISOString().split('T')[0];
                        
                        const checkOutDateTime = new Date(`${baseDate}T${googleRecord.checkOutTime}`);
                        
                        if (!isNaN(checkOutDateTime.getTime())) {
                            convertedData.push({
                                id: `${googleRecord.id}-checkout`,
                                studentId: googleRecord.studentId,
                                studentName: googleRecord.studentName,
                                status: 'Ìá¥Ïã§',
                                timestamp: checkOutDateTime.toISOString(),
                                source: 'google_sheets'
                            });
                        }
                    }
                });
                
                // ÎÇ†Ïßú ÌïÑÌÑ∞ÎßÅ Ï†ÅÏö©
                let filteredData = convertedData;
                if (filters.date) {
                    filteredData = convertedData.filter(record => {
                        const recordDate = new Date(record.timestamp).toISOString().split('T')[0];
                        return recordDate === filters.date;
                    });
                }
                
                console.log('üìä Íµ¨Í∏Ä Ïä§ÌîÑÎ†àÎìúÏãúÌä∏ÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå ÏÑ±Í≥µ:', filteredData.length + 'Í±¥');
                console.log('üîÑ Î≥ÄÌôòÎêú Îç∞Ïù¥ÌÑ∞ ÏÉòÌîå:', filteredData[0]);
                
                return {
                    success: true,
                    data: filteredData,
                    source: 'google_sheets_v8',
                    total: filteredData.length
                };
            } else {
                throw new Error(`HTTP ${response.status}`);
            }

        } catch (error) {
            console.warn('üîÑ Íµ¨Í∏Ä Ïä§ÌîÑÎ†àÎìúÏãúÌä∏ Ï°∞Ìöå Ïã§Ìå®, Î°úÏª¨ Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©:', error);
            const localResult = this._getFromLocalStorage(filters);
            localResult.fallbackMode = true;
            return localResult;
        }
    }

    /**
     * Î°úÏª¨Ïä§ÌÜ†Î¶¨ÏßÄÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå
     */
    _getFromLocalStorage(filters = {}) {
        try {
            const attendanceData = JSON.parse(localStorage.getItem('attendanceData') || '[]');
            let filteredData = attendanceData;

            // ÎÇ†Ïßú ÌïÑÌÑ∞
            if (filters.date) {
                const targetDate = filters.date;
                filteredData = filteredData.filter(record => {
                    const recordDate = new Date(record.timestamp).toISOString().split('T')[0];
                    return recordDate === targetDate;
                });
            }

            // ÌïôÏÉù ÌïÑÌÑ∞
            if (filters.studentId) {
                filteredData = filteredData.filter(record => 
                    record.studentId === filters.studentId
                );
            }

            console.log(`Î°úÏª¨Ïä§ÌÜ†Î¶¨ÏßÄÏóêÏÑú ${filteredData.length}Í∞ú Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå`);

            return {
                success: true,
                data: filteredData,
                source: 'localStorage',
                total: filteredData.length
            };

        } catch (error) {
            console.error('Î°úÏª¨Ïä§ÌÜ†Î¶¨ÏßÄ Ï°∞Ìöå Ïã§Ìå®:', error);
            return {
                success: false,
                message: 'Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.',
                data: []
            };
        }
    }

    /**
     * Ïò§ÎäòÏùò Ï∂úÍ≤∞ ÌÜµÍ≥Ñ
     */
    async getTodayStats() {
        const today = new Date().toISOString().split('T')[0];
        const result = await this.getAttendanceData({ date: today });
        
        if (!result.success) {
            return { success: false, message: result.message };
        }

        const attendanceData = result.data;
        
        // ÌïôÏÉùÎ≥Ñ Îç∞Ïù¥ÌÑ∞ ÏßëÍ≥Ñ
        const studentData = {};
        attendanceData.forEach(record => {
            const key = record.studentId;
            if (!studentData[key]) {
                studentData[key] = {
                    studentId: record.studentId,
                    studentName: record.studentName,
                    checkIn: null,
                    checkOut: null,
                    records: []
                };
            }
            
            studentData[key].records.push(record);
            
            if (record.status === 'ÏûÖÏã§') {
                const checkTime = new Date(record.timestamp);
                if (!studentData[key].checkIn || checkTime < new Date(studentData[key].checkIn.timestamp)) {
                    studentData[key].checkIn = record;
                }
            } else if (record.status === 'Ìá¥Ïã§') {
                const checkTime = new Date(record.timestamp);
                if (!studentData[key].checkOut || checkTime > new Date(studentData[key].checkOut.timestamp)) {
                    studentData[key].checkOut = record;
                }
            }
        });

        const students = Object.values(studentData);
        const total = students.length;
        const completed = students.filter(s => s.checkIn && s.checkOut).length;
        const ongoing = students.filter(s => s.checkIn && !s.checkOut).length;
        const missing = students.filter(s => !s.checkIn).length;

        return {
            success: true,
            data: {
                total,
                completed,
                ongoing, 
                missing,
                completionRate: total > 0 ? Math.round((completed / total) * 100) : 0,
                students
            }
        };
    }

    /**
     * Ï£ºÍ∞Ñ ÌÜµÍ≥Ñ
     */
    async getWeeklyStats() {
        const weekData = [];
        
        for (let i = 6; i >= 0; i--) {
            const date = new Date();
            date.setDate(date.getDate() - i);
            const dateStr = date.toISOString().split('T')[0];
            
            const dayResult = await this.getAttendanceData({ date: dateStr });
            const dayData = dayResult.success ? dayResult.data : [];
            
            // ÌïôÏÉùÎ≥Ñ ÏßëÍ≥Ñ
            const students = {};
            dayData.forEach(record => {
                if (!students[record.studentId]) {
                    students[record.studentId] = { checkIn: false, checkOut: false };
                }
                if (record.status === 'ÏûÖÏã§') students[record.studentId].checkIn = true;
                if (record.status === 'Ìá¥Ïã§') students[record.studentId].checkOut = true;
            });
            
            const completed = Object.values(students).filter(s => s.checkIn && s.checkOut).length;
            const total = Object.keys(students).length;
            
            weekData.push({
                date: dateStr,
                dateLabel: date.toLocaleDateString('ko-KR', { month: 'short', day: 'numeric' }),
                total,
                completed,
                rate: total > 0 ? Math.round((completed / total) * 100) : 0
            });
        }

        return {
            success: true,
            data: weekData
        };
    }

    /**
     * ÎàÑÎùΩ Îç∞Ïù¥ÌÑ∞ ÏûêÎèô Ï≤òÎ¶¨ (ÏãúÎÆ¨Î†àÏù¥ÏÖò)
     */
    async processMissingData() {
        console.log('ÎàÑÎùΩ Îç∞Ïù¥ÌÑ∞ ÏûêÎèô Ï≤òÎ¶¨ ÏãúÏûë...');
        
        const today = new Date().toISOString().split('T')[0];
        const todayStats = await this.getTodayStats();
        
        if (!todayStats.success) {
            return { success: false, message: 'Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïã§Ìå®' };
        }

        const students = todayStats.data.students;
        let processedCount = 0;
        const processedStudents = [];

        // ÏûÖÏã§ ÎàÑÎùΩ Ï≤òÎ¶¨
        students.forEach(student => {
            if (!student.checkIn) {
                console.log(`${student.studentName}(${student.studentId}) ÏûÖÏã§ ÎàÑÎùΩ ‚Üí 07:10 ÏûêÎèô Ï≤òÎ¶¨`);
                processedCount++;
                processedStudents.push({
                    name: student.studentName,
                    id: student.studentId,
                    type: 'ÏûÖÏã§ ÎàÑÎùΩ',
                    processedTime: '07:10:00'
                });
            }
        });

        // Ìá¥Ïã§ ÎàÑÎùΩ Ï≤òÎ¶¨
        students.forEach(student => {
            if (student.checkIn && !student.checkOut) {
                console.log(`${student.studentName}(${student.studentId}) Ìá¥Ïã§ ÎàÑÎùΩ ‚Üí 07:47 ÏûêÎèô Ï≤òÎ¶¨`);
                processedCount++;
                processedStudents.push({
                    name: student.studentName,
                    id: student.studentId,
                    type: 'Ìá¥Ïã§ ÎàÑÎùΩ',
                    processedTime: '07:47:00'
                });
            }
        });

        return {
            success: true,
            message: `${processedCount}Í±¥Ïùò ÎàÑÎùΩ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûêÎèôÏúºÎ°ú Ï≤òÎ¶¨ÎêòÏóàÏäµÎãàÎã§.`,
            processedCount,
            processedStudents
        };
    }

    /**
     * Îç∞Ïù¥ÌÑ∞ ÎÇ¥Î≥¥ÎÇ¥Í∏∞
     */
    exportData(format = 'csv') {
        const attendanceData = JSON.parse(localStorage.getItem('attendanceData') || '[]');
        
        if (attendanceData.length === 0) {
            throw new Error('ÎÇ¥Î≥¥ÎÇº Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.');
        }

        if (format === 'csv') {
            return this._exportToCsv(attendanceData);
        } else if (format === 'json') {
            return this._exportToJson(attendanceData);
        }
    }

    /**
     * CSV ÌòïÌÉúÎ°ú ÎÇ¥Î≥¥ÎÇ¥Í∏∞
     */
    _exportToCsv(data) {
        const headers = ['ÎÇ†Ïßú', 'ÌïôÎ≤à', 'Ïù¥Î¶Ñ', 'Íµ¨Î∂Ñ', 'ÏãúÍ∞Ñ'];
        const csvRows = [headers.join(',')];
        
        data.forEach(record => {
            const date = new Date(record.timestamp).toLocaleDateString('ko-KR');
            const time = new Date(record.timestamp).toLocaleTimeString('ko-KR');
            const row = [date, record.studentId, record.studentName, record.status, time];
            csvRows.push(row.join(','));
        });

        const csvContent = "\uFEFF" + csvRows.join('\n'); // BOM Ï∂îÍ∞ÄÎ°ú ÌïúÍ∏Ä Íπ®Ïßê Î∞©ÏßÄ
        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
        
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.download = `Í¥ëÏòÅÏó¨Í≥†_ÏïÑÏπ®ÏûêÏäµ_${new Date().toISOString().split('T')[0]}.csv`;
        link.click();
        
        return { success: true, message: 'CSV ÌååÏùºÏù¥ Îã§Ïö¥Î°úÎìúÎêòÏóàÏäµÎãàÎã§.' };
    }

    /**
     * JSON ÌòïÌÉúÎ°ú ÎÇ¥Î≥¥ÎÇ¥Í∏∞
     */
    _exportToJson(data) {
        const jsonContent = JSON.stringify(data, null, 2);
        const blob = new Blob([jsonContent], { type: 'application/json' });
        
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.download = `Í¥ëÏòÅÏó¨Í≥†_ÏïÑÏπ®ÏûêÏäµ_${new Date().toISOString().split('T')[0]}.json`;
        link.click();
        
        return { success: true, message: 'JSON ÌååÏùºÏù¥ Îã§Ïö¥Î°úÎìúÎêòÏóàÏäµÎãàÎã§.' };
    }

    /**
     * JJ ÏÑ†ÏÉùÎãò v8 ÏãúÏä§ÌÖú Ïó∞Í≤∞ ÏÉÅÌÉú ÌôïÏù∏
     */
    async checkConnection() {
        if (!this.webAppUrl) {
            return { 
                connected: false, 
                mode: 'offline',
                message: '‚ö†Ô∏è Íµ¨Í∏Ä Ïï±Ïä§ÌÅ¨Î¶ΩÌä∏ URLÏù¥ ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.',
                setup_url: './integration-guide.html'
            };
        }

        try {
            // Í∞ÑÎã®Ìïú Ïó∞Í≤∞ ÌÖåÏä§Ìä∏ (timeout ÏÑ§Ï†ï)
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 3000); // 3Ï¥à ÌÉÄÏûÑÏïÑÏõÉ
            
            const testResponse = await fetch(`${this.webAppUrl}?action=test&timestamp=${Date.now()}`, {
                method: 'GET',
                mode: 'no-cors',
                signal: controller.signal
            });
            
            clearTimeout(timeoutId);
            console.log('üîó JJ ÏÑ†ÏÉùÎãòÏùò Íµ¨Í∏Ä Ïä§ÌîÑÎ†àÎìúÏãúÌä∏ v8 ÏãúÏä§ÌÖúÍ≥º Ïó∞Í≤∞ ÏãúÎèÑ ÏôÑÎ£å');
            
            return {
                connected: 'unknown', // no-corsÏóêÏÑúÎäî Ï†ïÌôïÌïú ÏÉÅÌÉú ÌôïÏù∏ Î∂àÍ∞ÄÌïòÏßÄÎßå Ï†ïÏÉÅ
                mode: 'hybrid',
                message: 'üîÑ ÌïòÏù¥Î∏åÎ¶¨Îìú Î™®Îìú: Î°úÏª¨ + Íµ¨Í∏Ä ÏãúÏä§ÌÖú',
                spreadsheet_id: '1dJEOyc59eZgwidKjXiYptgreAIabfBbkndN0g17Qsb8',
                system_version: 'v8',
                features: ['Î°úÏª¨ Ï†ÄÏû•', 'Íµ¨Í∏Ä ÎèôÍ∏∞Ìôî', 'Ïò§ÌîÑÎùºÏù∏ ÏßÄÏõê']
            };

        } catch (error) {
            // ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•òÎäî Ï†ïÏÉÅÏ†ÅÏù∏ ÏÉÅÌô©ÏúºÎ°ú Ï≤òÎ¶¨
            console.log('üì° ÎÑ§Ìä∏ÏõåÌÅ¨ ÏÉÅÌÉú:', error.name || 'Unknown');
            
            if (error.name === 'AbortError') {
                return {
                    connected: false,
                    mode: 'local_only',
                    message: '‚è±Ô∏è Ïó∞Í≤∞ ÏãúÍ∞Ñ Ï¥àÍ≥º: Î°úÏª¨ Î™®ÎìúÎ°ú ÎèôÏûë'
                };
            }
            
            return {
                connected: false,
                mode: 'local_only', 
                message: 'üì± Î°úÏª¨ Î™®Îìú: Ïò§ÌîÑÎùºÏù∏ÏóêÏÑúÎèÑ Ï†ïÏÉÅ ÏûëÎèô',
                note: 'Îç∞Ïù¥ÌÑ∞Îäî Î°úÏª¨Ïóê ÏïàÏ†ÑÌïòÍ≤å Ï†ÄÏû•Îê©ÎãàÎã§.'
            };
        }
    }

    /**
     * Google Apps Script URL ÏÑ§Ï†ï Î∞è Í≤ÄÏ¶ù
     */
    async configureGoogleAppsScript(url) {
        try {
            // URL Ïú†Ìö®ÏÑ± Í≤ÄÏ¶ù
            if (!url || !url.includes('script.google.com')) {
                throw new Error('Ïò¨Î∞îÎ•∏ Google Apps Script URLÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
            }

            // Ïó∞Í≤∞ ÌÖåÏä§Ìä∏
            const testResponse = await fetch(`${url}?action=test&timestamp=${Date.now()}`, {
                method: 'GET',
                mode: 'no-cors'
            });

            // URL Ï†ÄÏû•
            this.setWebAppUrl(url);
            
            console.log('üéâ Google Apps Script v8 ÏãúÏä§ÌÖú Ïó∞Îèô ÏÑ±Í≥µ!');
            
            return {
                success: true,
                message: '‚úÖ JJ ÏÑ†ÏÉùÎãòÏùò Íµ¨Í∏Ä Ïä§ÌîÑÎ†àÎìúÏãúÌä∏ ÏãúÏä§ÌÖúÍ≥º ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ïó∞Í≤∞ÎêòÏóàÏäµÎãàÎã§!',
                spreadsheetId: '1dJEOyc59eZgwidKjXiYptgreAIabfBbkndN0g17Qsb8',
                features: ['ÏûêÎèôÌôî Ï≤òÎ¶¨', 'Ïù¥Î©îÏùº Î¶¨Ìè¨Ìä∏', 'ÎàÑÎùΩ Îç∞Ïù¥ÌÑ∞ Î≥¥ÏôÑ']
            };

        } catch (error) {
            console.error('Google Apps Script ÏÑ§Ï†ï Ïã§Ìå®:', error);
            return {
                success: false,
                message: `Ïó∞Îèô ÏÑ§Ï†ï Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${error.message}`
            };
        }
    }

    /**
     * Íµ¨Í∏Ä Ïä§ÌîÑÎ†àÎìúÏãúÌä∏ÏóêÏÑú ÌïôÏÉù Î™ÖÎã® Ï°∞Ìöå
     */
    async getStudentList() {
        try {
            if (this.isOnlineMode && this.webAppUrl) {
                console.log('üìö Íµ¨Í∏Ä Ïä§ÌîÑÎ†àÎìúÏãúÌä∏ÏóêÏÑú ÌïôÏÉù Î™ÖÎã® Ï°∞Ìöå Ï§ë...');
                
                const params = new URLSearchParams({
                    action: 'getStudentList'
                });
                
                const response = await fetch(`${this.webAppUrl}?${params}`, {
                    method: 'GET'
                });
                
                if (response.ok) {
                    const result = await response.json();
                    
                    if (result.success && result.data) {
                        console.log('‚úÖ ÌïôÏÉù Î™ÖÎã® Ï°∞Ìöå ÏÑ±Í≥µ:', result.data.length + 'Î™Ö');
                        
                        // Î°úÏª¨Ïä§ÌÜ†Î¶¨ÏßÄÏóê Ï∫êÏãú Ï†ÄÏû• (Ïò§ÌîÑÎùºÏù∏ ÎåÄÎπÑ)
                        localStorage.setItem('studentList', JSON.stringify(result.data));
                        localStorage.setItem('studentListUpdated', new Date().toISOString());
                        
                        return {
                            success: true,
                            data: result.data,
                            source: 'google_sheets'
                        };
                    }
                }
            }
            
            // Ïò§ÌîÑÎùºÏù∏Ïù¥Í±∞ÎÇò Ïã§Ìå® Ïãú Ï∫êÏãúÎêú Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©
            const cachedList = localStorage.getItem('studentList');
            if (cachedList) {
                const studentList = JSON.parse(cachedList);
                console.log('üì± Ï∫êÏãúÎêú ÌïôÏÉù Î™ÖÎã® ÏÇ¨Ïö©:', studentList.length + 'Î™Ö');
                return {
                    success: true,
                    data: studentList,
                    source: 'cache'
                };
            }
            
            return {
                success: false,
                message: 'ÌïôÏÉù Î™ÖÎã®ÏùÑ Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.'
            };
            
        } catch (error) {
            console.warn('ÌïôÏÉù Î™ÖÎã® Ï°∞Ìöå Ïã§Ìå®:', error);
            
            // Ïò§Î•ò ÏãúÏóêÎèÑ Ï∫êÏãú ÏãúÎèÑ
            const cachedList = localStorage.getItem('studentList');
            if (cachedList) {
                return {
                    success: true,
                    data: JSON.parse(cachedList),
                    source: 'cache_fallback'
                };
            }
            
            return {
                success: false,
                message: 'ÌïôÏÉù Î™ÖÎã® Ï°∞Ìöå Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.'
            };
        }
    }

    /**
     * ÌïôÎ≤àÏúºÎ°ú ÌïôÏÉù Ïù¥Î¶Ñ Ï°∞Ìöå
     */
    async getStudentName(studentId) {
        try {
            const studentListResult = await this.getStudentList();
            
            if (!studentListResult.success) {
                return {
                    success: false,
                    message: studentListResult.message
                };
            }
            
            // ÌïôÎ≤àÏúºÎ°ú ÌïôÏÉù Ï∞æÍ∏∞
            const student = studentListResult.data.find(s => s.studentId === studentId);
            
            if (student) {
                return {
                    success: true,
                    data: {
                        studentId: student.studentId,
                        studentName: student.studentName
                    },
                    source: studentListResult.source
                };
            } else {
                return {
                    success: false,
                    message: 'Ìï¥Îãπ ÌïôÎ≤àÏùò ÌïôÏÉùÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.'
                };
            }
            
        } catch (error) {
            console.error('ÌïôÏÉù Ïù¥Î¶Ñ Ï°∞Ìöå Ïã§Ìå®:', error);
            return {
                success: false,
                message: 'ÌïôÏÉù Ï†ïÎ≥¥ Ï°∞Ìöå Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.'
            };
        }
    }

    /**
     * Google SheetsÏóêÏÑú ÌïôÏÉùÎ≥Ñ ÌÜµÍ≥Ñ Ï°∞Ìöå (student.htmlÏö©)
     */
    async getStudentStats(studentId) {
        if (!studentId || studentId.length !== 5) {
            return {
                success: false,
                message: 'Ïò¨Î∞îÎ•∏ 5ÏûêÎ¶¨ ÌïôÎ≤àÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.'
            };
        }

        try {
            if (this.isOnlineMode && this.webAppUrl) {
                // Google Apps Script v8 ÏãúÏä§ÌÖúÏóêÏÑú ÌïôÏÉù Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå
                const params = new URLSearchParams({
                    action: 'getStudentData',
                    student_id: studentId,
                    format: 'json'
                });

                const response = await fetch(`${this.webAppUrl}?${params}`, {
                    method: 'GET',
                    mode: 'cors'
                });

                if (response.ok) {
                    const data = await response.json();
                    console.log(`üìä ${studentId}Î≤à ÌïôÏÉù Google Sheets Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå ÏÑ±Í≥µ`);
                    return {
                        success: true,
                        data: data,
                        source: 'google_sheets_v8'
                    };
                }
            }

            // Ïò§ÌîÑÎùºÏù∏ Î™®Îìú ÎòêÎäî Ïò®ÎùºÏù∏ Ïã§Ìå®Ïãú Î°úÏª¨ Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©
            const localData = this._getFromLocalStorage({ studentId });
            return localData;

        } catch (error) {
            console.warn('ÌïôÏÉù ÌÜµÍ≥Ñ Ï°∞Ìöå Ïã§Ìå®, Î°úÏª¨ Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©:', error);
            return this._getFromLocalStorage({ studentId });
        }
    }

    /**
     * Google Apps Script ÏûêÎèôÌôî Í∏∞Îä• Ìä∏Î¶¨Í±∞ (adminÏö©)
     */
    async triggerAutomation(type = 'processMissing') {
        if (!this.isOnlineMode || !this.webAppUrl) {
            return {
                success: false,
                message: 'Ïò§ÌîÑÎùºÏù∏ Î™®ÎìúÏóêÏÑúÎäî ÏûêÎèôÌôî Í∏∞Îä•ÏùÑ ÏÇ¨Ïö©Ìï† Ïàò ÏóÜÏäµÎãàÎã§.'
            };
        }

        try {
            const params = new URLSearchParams({
                action: type,
                timestamp: new Date().toISOString(),
                trigger_source: 'web_interface'
            });

            const response = await fetch(`${this.webAppUrl}?${params}`, {
                method: 'GET',
                mode: 'no-cors'
            });

            console.log(`ü§ñ ÏûêÎèôÌôî Í∏∞Îä• Ìä∏Î¶¨Í±∞: ${type}`);
            
            return {
                success: true,
                message: `‚úÖ ${type} ÏûêÎèôÌôî Í∏∞Îä•Ïù¥ Ïã§ÌñâÎêòÏóàÏäµÎãàÎã§.`,
                note: 'Google Apps ScriptÏóêÏÑú Î∞±Í∑∏ÎùºÏö¥ÎìúÎ°ú Ï≤òÎ¶¨ Ï§ëÏûÖÎãàÎã§.'
            };

        } catch (error) {
            console.error('ÏûêÎèôÌôî Ìä∏Î¶¨Í±∞ Ïã§Ìå®:', error);
            return {
                success: false,
                message: `ÏûêÎèôÌôî Ïã§Ìñâ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${error.message}`
            };
        }
    }

    /**
     * Google Sheets Ïã§ÏãúÍ∞Ñ Îç∞Ïù¥ÌÑ∞ ÎèôÍ∏∞Ìôî
     */
    async syncWithGoogleSheets() {
        if (!this.isOnlineMode || !this.webAppUrl) {
            return {
                success: false,
                message: 'Google Apps ScriptÍ∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.'
            };
        }

        try {
            // Î°úÏª¨Ïóê Ï†ÄÏû•Îêú ÎØ∏ÎèôÍ∏∞Ìôî Îç∞Ïù¥ÌÑ∞ Ï∞æÍ∏∞
            const localData = JSON.parse(localStorage.getItem('attendanceData') || '[]');
            const unsyncedData = localData.filter(record => record.source === 'offline');

            if (unsyncedData.length === 0) {
                return {
                    success: true,
                    message: 'ÎèôÍ∏∞ÌôîÌï† Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.',
                    syncedCount: 0
                };
            }

            // Í∞Å ÎØ∏ÎèôÍ∏∞Ìôî Îç∞Ïù¥ÌÑ∞Î•º Google SheetsÎ°ú Ï†ÑÏÜ°
            let syncedCount = 0;
            for (const record of unsyncedData) {
                try {
                    await this._submitToGoogleScript(record);
                    // ÏÑ±Í≥µÌïú Îç∞Ïù¥ÌÑ∞Îäî sourceÎ•º 'synced'Î°ú Î≥ÄÍ≤Ω
                    record.source = 'synced';
                    record.syncedAt = new Date().toISOString();
                    syncedCount++;
                } catch (syncError) {
                    console.warn('Í∞úÎ≥Ñ Îç∞Ïù¥ÌÑ∞ ÎèôÍ∏∞Ìôî Ïã§Ìå®:', syncError);
                }
            }

            // ÏóÖÎç∞Ïù¥Ìä∏Îêú Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•
            localStorage.setItem('attendanceData', JSON.stringify(localData));

            return {
                success: true,
                message: `‚úÖ ${syncedCount}Í±¥Ïùò Ïò§ÌîÑÎùºÏù∏ Îç∞Ïù¥ÌÑ∞Í∞Ä Google SheetsÏôÄ ÎèôÍ∏∞ÌôîÎêòÏóàÏäµÎãàÎã§.`,
                syncedCount,
                totalCount: unsyncedData.length
            };

        } catch (error) {
            console.error('Google Sheets ÎèôÍ∏∞Ìôî Ïã§Ìå®:', error);
            return {
                success: false,
                message: `ÎèôÍ∏∞Ìôî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${error.message}`
            };
        }
    }

    /**
     * Í≥†Ïú† ID ÏÉùÏÑ±
     */
    _generateId() {
        return Date.now().toString(36) + Math.random().toString(36).substr(2, 5);
    }

    /**
     * Î°úÏª¨ Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî
     */
    clearLocalData() {
        localStorage.removeItem('attendanceData');
        console.log('Î°úÏª¨ Ï∂úÍ≤∞ Îç∞Ïù¥ÌÑ∞Í∞Ä Ï¥àÍ∏∞ÌôîÎêòÏóàÏäµÎãàÎã§.');
        return { success: true, message: 'Î°úÏª¨ Îç∞Ïù¥ÌÑ∞Í∞Ä Ï¥àÍ∏∞ÌôîÎêòÏóàÏäµÎãàÎã§.' };
    }

    /**
     * ÏãúÏä§ÌÖú Ï†ïÎ≥¥
     */
    getSystemInfo() {
        const attendanceData = JSON.parse(localStorage.getItem('attendanceData') || '[]');
        
        return {
            mode: this.isOnlineMode ? 'google_sheets_v8' : 'offline_only',
            webAppUrl: this.webAppUrl,
            spreadsheetId: '1dJEOyc59eZgwidKjXiYptgreAIabfBbkndN0g17Qsb8',
            localRecords: attendanceData.length,
            lastUpdate: attendanceData.length > 0 ? 
                Math.max(...attendanceData.map(r => new Date(r.timestamp).getTime())) : null,
            version: '9.0',
            integration: 'JJÏÑ†ÏÉùÎãò_Íµ¨Í∏ÄÏä§ÌîÑÎ†àÎìúÏãúÌä∏_v8',
            features: {
                offline_storage: true,
                google_sync: this.isOnlineMode,
                auto_processing: this.isOnlineMode,
                email_reports: this.isOnlineMode
            }
        };
    }
}

// Ï†ÑÏó≠ API Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±
window.attendanceAPI = new AttendanceAPI();

// Ïó∞Í≤∞ ÏÉÅÌÉú Ï£ºÍ∏∞Ï†Å ÌôïÏù∏
setInterval(async () => {
    const status = await window.attendanceAPI.checkConnection();
    console.log('Ïó∞Í≤∞ ÏÉÅÌÉú:', status);
}, 60000); // 1Î∂ÑÎßàÎã§ ÌôïÏù∏
